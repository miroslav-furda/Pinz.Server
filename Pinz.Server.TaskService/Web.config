<?xml version="1.0" encoding="utf-8"?>

<configuration>
  <configSections>
    <sectionGroup name="common">
      <section name="logging" type="Common.Logging.ConfigurationSectionHandler, Common.Logging" />
    </sectionGroup>
  </configSections>
  <common>
    <logging>
      <factoryAdapter
        type="Common.Logging.ApplicationInsights.ApplicationInsightsLoggerFactoryAdapter, Common.Logging.ApplicationInsights0170">
        <arg key="InstrumentationKey" value="18b0b26d-5839-4f6a-8fb9-0da40f68a001" />
      </factoryAdapter>
    </logging>
  </common>
  <system.diagnostics>
    <trace>
      <listeners>
        <add
          type="Microsoft.WindowsAzure.Diagnostics.DiagnosticMonitorTraceListener, Microsoft.WindowsAzure.Diagnostics, Version=2.8.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35"
          name="AzureDiagnostics">
          <filter type="" />
        </add>
        <add name="myAppInsightsListener"
             type="Microsoft.ApplicationInsights.TraceListener.ApplicationInsightsTraceListener, Microsoft.ApplicationInsights.TraceListener" />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.web>
    <compilation debug="true" targetFramework="4.5.2" />
    <customErrors mode="Off" />
    <httpModules>
      <add name="ApplicationInsightsWebTracking"
           type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web" />
    </httpModules>
  </system.web>

  <!-- Service Model -->
  <system.serviceModel>
    <services>
      <service behaviorConfiguration="WsSecuredServiceBehavior" name="Com.Pinz.Server.TaskService.TaskService">
        <endpoint address="/service" binding="wsHttpBinding" bindingConfiguration="RequestUserName"
                  contract="Com.Pinz.Server.TaskService.ITaskService" />
      </service>
      <service behaviorConfiguration="WsSecuredServiceBehavior"
               name="Com.Pinz.Server.TaskService.AdministrationService">
        <endpoint address="/service" binding="wsHttpBinding" bindingConfiguration="RequestUserName"
                  contract="Com.Pinz.Server.TaskService.IAdministrationService" />
      </service>
      <service behaviorConfiguration="WsSecuredServiceBehavior" name="Com.Pinz.Server.TaskService.AuthorisationService">
        <endpoint address="/service" binding="wsHttpBinding" bindingConfiguration="RequestUserName"
                  contract="Com.Pinz.Server.TaskService.IAuthorisationService" />
      </service>
      <service behaviorConfiguration="WsSecuredServiceBehavior" name="Com.Pinz.Server.TaskService.PinzAdminService">
        <endpoint address="/service" binding="wsHttpBinding" bindingConfiguration="RequestUserName"
                  contract="Com.Pinz.Server.TaskService.IPinzAdminService" />
      </service>
      <service behaviorConfiguration="restServiceBehavior"
               name="Com.Pinz.Server.TaskService.SubscriptionApi.SubscriptionNotificationService">
        <endpoint address="" binding="webHttpBinding" behaviorConfiguration="web"
                  contract="Com.Pinz.Server.TaskService.SubscriptionApi.ISubscriptionNotificationService" />
      </service>
      <service behaviorConfiguration="restBasicAuthServiceBehavior"
               name="Com.Pinz.Server.TaskService.SubscriptionApi.SiteSubscriptionService">
        <endpoint address="" binding="webHttpBinding" behaviorConfiguration="web"
                  contract="Com.Pinz.Server.TaskService.SubscriptionApi.ISiteSubscriptionService" />
      </service>
    </services>
    <behaviors>
      <endpointBehaviors>
        <behavior name="web">
          <webHttp />
        </behavior>
      </endpointBehaviors>
      <serviceBehaviors>
        <behavior name="WsSecuredServiceBehavior">
          <serviceDebug includeExceptionDetailInFaults="true" />
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceAuthorization principalPermissionMode="Custom">
            <authorizationPolicies>
              <add policyType="Com.Pinz.Server.TaskService.Security.PinzAuthorizationPolicy, Pinz.Server.TaskService" />
            </authorizationPolicies>
          </serviceAuthorization>
          <serviceCredentials>
            <clientCertificate>
              <authentication certificateValidationMode="None" />
            </clientCertificate>
<!--
            <serviceCertificate findValue="pinzdevservice.cloudapp.net" storeLocation="LocalMachine"
              storeName="My" x509FindType="FindBySubjectName" />
-->
            <userNameAuthentication userNamePasswordValidationMode="Custom"
              customUserNamePasswordValidatorType="Com.Pinz.Server.TaskService.Security.UserSecurityValidator, Pinz.Server.TaskService" />
          </serviceCredentials>
        </behavior>
        <behavior name="restServiceBehavior">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
        <behavior name="restBasicAuthServiceBehavior">
          <serviceMetadata httpGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
          <serviceAuthorization serviceAuthorizationManagerType="Com.Pinz.Server.TaskService.Security.RestAuthorizationManager, Pinz.Server.TaskService"/>
        </behavior>
        <behavior name="">
          <serviceMetadata httpGetEnabled="true" httpsGetEnabled="true" />
          <serviceDebug includeExceptionDetailInFaults="false" />
        </behavior>
      </serviceBehaviors>
    </behaviors>
    <serviceHostingEnvironment aspNetCompatibilityEnabled="false" multipleSiteBindingsEnabled="true">
      <serviceActivations>
        <add relativeAddress="TaskService.svc" service="Com.Pinz.Server.TaskService.TaskService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
        <add relativeAddress="AdministrationService.svc" service="Com.Pinz.Server.TaskService.AdministrationService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
        <add relativeAddress="AuthorisationService.svc" service="Com.Pinz.Server.TaskService.AuthorisationService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
        <add relativeAddress="PinzAdminService.svc" service="Com.Pinz.Server.TaskService.PinzAdminService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
        <add relativeAddress="SubscriptionApi/SubscriptionNotificationService.svc"
             service="Com.Pinz.Server.TaskService.SubscriptionApi.SubscriptionNotificationService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
        <add relativeAddress="SubscriptionApi/SiteSubscriptionService.svc"
             service="Com.Pinz.Server.TaskService.SubscriptionApi.SiteSubscriptionService"
             factory="Ninject.Extensions.Wcf.NinjectServiceHostFactory" />
      </serviceActivations>
    </serviceHostingEnvironment>
    <bindings>
      <wsHttpBinding>
        <binding name="RequestUserName">
          <security mode="Message">
            <message clientCredentialType="UserName" />
          </security>
        </binding>
      </wsHttpBinding>
    </bindings>
  </system.serviceModel>

  <!--Web Server-->
  <system.webServer>
    <modules runAllManagedModulesForAllRequests="true">
      <remove name="ApplicationInsightsWebTracking" />
      <add name="ApplicationInsightsWebTracking"
           type="Microsoft.ApplicationInsights.Web.ApplicationInsightsHttpModule, Microsoft.AI.Web"
           preCondition="managedHandler" />
    </modules>
    <!--
        To browse web app root directory during debugging, set the value below to true.
        Set to false before deployment to avoid disclosing web app folder information.
    -->
    <directoryBrowse enabled="true" />
    <validation validateIntegratedModeConfiguration="false" />
  </system.webServer>

  <connectionStrings>
    <add name="pinzDBConnectionString"
         connectionString="Server=tcp:pinzdbserverwe.database.windows.net,1433;Initial Catalog=pinzDevDb;Persist Security Info=False;User ID=pinzServiceDev;Password=Vp85AUZe3[_BU^BM;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;"
         providerName="System.Data.SqlClient" />
  </connectionStrings>
  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Data.Services.Client" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.7.0.0" newVersion="5.7.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Data.OData" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.7.0.0" newVersion="5.7.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.Data.Edm" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-5.7.0.0" newVersion="5.7.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Newtonsoft.Json" publicKeyToken="30ad4fe6b2a6aeed" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-9.0.0.0" newVersion="9.0.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.ApplicationInsights" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.1.0.0" newVersion="2.1.0.0" />
      </dependentAssembly>
      <dependentAssembly>
        <assemblyIdentity name="Microsoft.AI.Agent.Intercept" publicKeyToken="31bf3856ad364e35" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-2.0.1.0" newVersion="2.0.1.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>
</configuration>